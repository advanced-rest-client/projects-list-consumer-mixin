/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   projects-list-consumer-mixin.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />

declare namespace ArcComponents {


  /**
   * A mixin with common methods for (legacy) projects list.
   * Use it for components that reads list of projects and requires to keep track
   * of changes in a project object.
   */
  function ProjectsListConsumerMixin<T extends new (...args: any[]) => {}>(base: T): T & ProjectsListConsumerMixinConstructor;

  interface ProjectsListConsumerMixinConstructor {
    new(...args: any[]): ProjectsListConsumerMixin;
  }

  interface ProjectsListConsumerMixin {

    /**
     * List of available projects.
     */
    projects: any[]|null|undefined;

    /**
     * Computed value, true if any project is on the list.
     */
    readonly hasProjects: boolean|null|undefined;

    /**
     * When set the element won't request projects list when attached to the dom.
     * When set `refreshProjects()` has to be called manually.
     */
    noAutoProjects: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Computes value for `hasProjects` property
     *
     * @param record Polymer change record
     */
    _computeHasProjects(record: object|null): Boolean|null;

    /**
     * Refreshes projects list when ARC data were imported.
     */
    _projectDataImportHandler(e: CustomEvent|null): void;

    /**
     * Handler for `datastore-destroyed` custom event.
     * Refreshes list of projects afyter clearing the data.
     */
    _projectDatabaseDestroyedHandler(e: CustomEvent|null): void;

    /**
     * Refreshes the list of projects after next render frame.
     */
    refreshProjects(): void;

    /**
     * Handler for non-cancelable `project-object-changed` event.
     * Updates the project on projects list or adds it if it's new project.
     */
    _projectChangedHandler(e: CustomEvent|null): void;

    /**
     * Handler for `project-object-deleted` custom event.
     * Removes a project from the list if applicable.
     * This will not handle cancelable events.
     */
    _projectDeletedHandler(e: CustomEvent|null): void;

    /**
     * Dispatches `project-model-query` custom event and returns it.
     */
    _dispatchProjectQueryEvent(): CustomEvent|null;

    /**
     * Updates list of available projects after the overlay is opened.
     */
    _updateProjectsList(): Promise<any>|null;

    /**
     * Sort function used to sort projects in order.
     */
    _projectsSortFn(a: object|null, b: object|null): Number|null;

    /**
     * Computes a list of suggestion for autocomplete element.
     * From the list of `projects` it takes names for each project and returns
     * new list for suggestions.
     */
    _computeProjectsAutocomplete(projects: Array<object|null>|null): Array<String|null>|null;

    /**
     * Handles errors.
     *
     * @param cause Error object
     */
    _handleProjectsError(cause: Error|null): void;

    /**
     * Processes projects name list and returns object with
     * `add` property as a list of project names that do not yet exists and
     * `existing` property with a list of IDs of existing projects.
     *
     * @param selectedProjects List of selected projects to process.
     * @returns `add` {Array<String>} List of names of a projects to create
     * - `existing` {Array<String>} List of IDs of existing projects
     */
    _processSelectedProjectsInfo(selectedProjects: Array<String|null>|null): object|null;
  }
}
