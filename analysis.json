{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "A mixin with common methods for (legacy) projects list.\nUse it for components that reads list of projects and requires to keep track\nof changes in a project object.",
      "summary": "",
      "path": "projects-list-consumer-mixin.js",
      "properties": [
        {
          "name": "projects",
          "type": "Array | null | undefined",
          "description": "List of available projects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hasProjects",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if any project is on the list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noAutoProjects",
          "type": "boolean | null | undefined",
          "description": "When set the element won't request projects list when attached to the dom.\nWhen set `refreshProjects()` has to be called manually.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 49,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeHasProjects",
          "description": "Computes value for `hasProjects` property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record",
              "type": "Object",
              "description": "Polymer change record"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_projectDataImportHandler",
          "description": "Refreshes projects list when ARC data were imported.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_projectDatabaseDestroyedHandler",
          "description": "Handler for `datastore-destroyed` custom event.\nRefreshes list of projects afyter clearing the data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refreshProjects",
          "description": "Refreshes the list of projects after next render frame.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_projectChangedHandler",
          "description": "Handler for non-cancelable `project-object-changed` event.\nUpdates the project on projects list or adds it if it's new project.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_projectDeletedHandler",
          "description": "Handler for `project-object-deleted` custom event.\nRemoves a project from the list if applicable.\nThis will not handle cancelable events.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatchProjectQueryEvent",
          "description": "Dispatches `project-model-query` custom event and returns it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_updateProjectsList",
          "description": "Updates list of available projects after the overlay is opened.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_projectsSortFn",
          "description": "Sort function used to sort projects in order.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        },
        {
          "name": "_computeProjectsAutocomplete",
          "description": "Computes a list of suggestion for autocomplete element.\nFrom the list of `projects` it takes names for each project and returns\nnew list for suggestions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "projects",
              "type": "Array.<Object>"
            }
          ],
          "return": {
            "type": "Array.<String>"
          }
        },
        {
          "name": "_handleProjectsError",
          "description": "Handles errors.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 272,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cause",
              "type": "Error",
              "description": "Error object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processSelectedProjectsInfo",
          "description": "Processes projects name list and returns object with\n`add` property as a list of project names that do not yet exists and\n`existing` property with a list of IDs of existing projects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 312,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedProjects",
              "type": "Array.<String>",
              "description": "List of selected projects to process."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "`add` {Array<String>} List of names of a projects to create\n- `existing` {Array<String>} List of IDs of existing projects"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 7
        },
        "end": {
          "line": 315,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ArcComponents.ProjectsListConsumerMixin",
      "attributes": [
        {
          "name": "projects",
          "description": "List of available projects.",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "has-projects",
          "description": "Computed value, true if any project is on the list.",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-auto-projects",
          "description": "When set the element won't request projects list when attached to the dom.\nWhen set `refreshProjects()` has to be called manually.",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 49,
              "column": 31
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
